Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
#What if we tried to create a parameter space that didn't meet the interface of the ParameterSpace
# As an example, let's say we didn't include the "get_names" method
class BadBasicParameterSpace(ParameterSpace):

    def __init__(self):
        #We will have two variables, x and y
        self.var_names = ['x','y']

        # The dimension of the parameter space is 2 (x and y)
        self.dim_ = 2

        # In this example we will consider uncorrelated variables w/ mean [1,2] and standard deviation [0.1,0.2]
        self.means_ = np.array([1,2])
        self.stds_ = np.array([0.1,0.2]) 

    def get_dimensionality(self):
        return self.dim_

    def generate_samples(self, number_of_samples: int, seed=None):
        samples = np.random.normal(self.means_,self.stds_,size=(number_of_samples,self.dim_))
        return samples

#Python will throw an error when we try to instatiate
if __name__ == "__main__":
    myBadBasicParameterSpace = BadBasicParameterSpace()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[3], line 25[0m
[1;32m     23[0m [38;5;66;03m#Python will throw an error when we try to instatiate[39;00m
[1;32m     24[0m [38;5;28;01mif[39;00m [38;5;18m__name__[39m [38;5;241m==[39m [38;5;124m"[39m[38;5;124m__main__[39m[38;5;124m"[39m:
[0;32m---> 25[0m     myBadBasicParameterSpace [38;5;241m=[39m [43mBadBasicParameterSpace[49m[43m([49m[43m)[49m

[0;31mTypeError[0m: Can't instantiate abstract class BadBasicParameterSpace with abstract method get_names

