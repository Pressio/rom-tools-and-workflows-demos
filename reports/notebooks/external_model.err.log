Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
#Let's do an example run of the model similar to how it will be used in a workflow.

#First, let's make a dictionary that is a stand in for the parameter space
if __name__ == "__main__":
    parameter_sample = {}
    parameter_sample['c'] = 0.5
    parameter_sample['nu'] = 1e-1
    
    #Now, let's populate our run directory. In this example, we will just use the current run directory.
    #In a full workflow, romtools will manage creating directories

    #Now, let's run the model
    adr_for_romtools.run_model(os.getcwd(),parameter_sample)

    #We can look at a solution
    sol = np.load('solution.npz')
    plt.plot(sol['x'],sol['u'])
    plt.xlabel(r'$x$')
    plt.ylabel(r'$u$')

    #We will finish by cleaning up the files we created
    os.system('rm params.dat')
    os.system('rm solution.npz')

    #That's it! See the sampling tutorial for an example of how this model is used in a sampling workflow
------------------

----- stderr -----
Traceback (most recent call last):
  File "/home/runner/work/rom-tools-and-workflows-demos/rom-tools-and-workflows-demos/docs/source/notebooks/adr_1d/adr_1d.py", line 41, in <module>
    params = np.genfromtxt('params.dat')
  File "/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/numpy/lib/_npyio_impl.py", line 1989, in genfromtxt
    fid = np.lib._datasource.open(fname, 'rt', encoding=encoding)
  File "/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/numpy/lib/_datasource.py", line 192, in open
    return ds.open(path, mode, encoding=encoding, newline=newline)
  File "/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/numpy/lib/_datasource.py", line 532, in open
    raise FileNotFoundError(f"{path} not found.")
FileNotFoundError: params.dat not found.
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mFileNotFoundError[0m                         Traceback (most recent call last)
Cell [0;32mIn[4], line 16[0m
[1;32m     13[0m adr_for_romtools[38;5;241m.[39mrun_model(os[38;5;241m.[39mgetcwd(),parameter_sample)
[1;32m     15[0m [38;5;66;03m#We can look at a solution[39;00m
[0;32m---> 16[0m sol [38;5;241m=[39m [43mnp[49m[38;5;241;43m.[39;49m[43mload[49m[43m([49m[38;5;124;43m'[39;49m[38;5;124;43msolution.npz[39;49m[38;5;124;43m'[39;49m[43m)[49m
[1;32m     17[0m plt[38;5;241m.[39mplot(sol[[38;5;124m'[39m[38;5;124mx[39m[38;5;124m'[39m],sol[[38;5;124m'[39m[38;5;124mu[39m[38;5;124m'[39m])
[1;32m     18[0m plt[38;5;241m.[39mxlabel([38;5;124mr[39m[38;5;124m'[39m[38;5;124m$x$[39m[38;5;124m'[39m)

File [0;32m/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/numpy/lib/_npyio_impl.py:455[0m, in [0;36mload[0;34m(file, mmap_mode, allow_pickle, fix_imports, encoding, max_header_size)[0m
[1;32m    453[0m     own_fid [38;5;241m=[39m [38;5;28;01mFalse[39;00m
[1;32m    454[0m [38;5;28;01melse[39;00m:
[0;32m--> 455[0m     fid [38;5;241m=[39m stack[38;5;241m.[39menter_context([38;5;28;43mopen[39;49m[43m([49m[43mos[49m[38;5;241;43m.[39;49m[43mfspath[49m[43m([49m[43mfile[49m[43m)[49m[43m,[49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43mrb[39;49m[38;5;124;43m"[39;49m[43m)[49m)
[1;32m    456[0m     own_fid [38;5;241m=[39m [38;5;28;01mTrue[39;00m
[1;32m    458[0m [38;5;66;03m# Code to distinguish from NumPy binary files and pickles.[39;00m

[0;31mFileNotFoundError[0m: [Errno 2] No such file or directory: 'solution.npz'

